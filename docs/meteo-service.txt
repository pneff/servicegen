@doc     "Provides weather forecast information for Switzerland."
@author  "Patrice Neff"
@version "1.0"
service meteo;

# Comments can be included with hash
# Newlines terminate a command.

# Configuration: Settings that have to be configured.
# There will be a uniform config handling framework
# which reads data from a YAML file somewhere.
config {
    # database is the data type.
    # db is the variable name.
    @param db "Database containing the weather information. Must have a table 'weather' with one entry per day."
    database db;
}

@doc       "Returns all available forecasts for a ZIP code in Switzerland."
@param zip "ZIP code for which to get weather forecast"
GET "/{zip}" {
    validate zip, /[0-9]{4}/;
    
    # Defines the variable data. SELECT statements are automatically
    # executed using the first database connection from config.
    records weather = "SELECT * FROM weather WHERE zip={zip} ORDER BY date ASC";
    
    # Defines output for XML. This output can be requested in two ways:
    #   - Requesting path with ".xml" at the end
    #   - Sending accept-encoding with XML
    # <...> automatically starts an XML token.
    @doc "Returns the weather forecast in XML format."
    output.xml {
        <meteo>
            {weather}
        </meteo>
    }
    
    # Defines output for CSV.
    output.csv {
        {weather}
    }
}
