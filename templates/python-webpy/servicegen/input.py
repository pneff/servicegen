# CAREFUL:
# This code was generated by the `servicegen' framework.
# Do not edit this file directly.

import web, cgi, ConfigParser, re
import setup
from cStringIO import StringIO
from servicegen.function import TerminateRequest

def input():
    """
    Returns input data (POST or GET) as a dictionary.
    Same as web.input() but works for all HTTP methods.
    """
    e = web.ctx.env.copy()
    if e['REQUEST_METHOD'] in ('GET', 'HEAD'):
        data = cgi.FieldStorage(environ=e, keep_blank_values=1)
    else:
        data = cgi.FieldStorage(fp = StringIO(web.data()), environ=e,
                                 keep_blank_values=1)
    retval = {}
    for key in data:
        retval[key] = data[key].value
    return retval

def get(key):
    if key[-1] == '*':
        return web.data()
    else:
        # Get POST data. Can't use web.input() as it
        # only works for POST method, not PUT
        data = input()
        if key in data:
            return data[key]
        else:
            web.ctx.status = '400 Bad Request'
            web.ctx.outputter.write_exception(('missing value', 'Missing value "' + key + '"'))
            raise TerminateRequest, 'Missing value "' + key + '"'

def get_config(key, type):
    try:
        value = setup.config.get(setup.SERVICENAME, key)
    except ConfigParser.NoOptionError:
        raise Exception, "Missing configuration option: %s" % key
    
    if type == 'regexp':
        return re.compile('^' + value[1:-1] + '$')
    elif type == 'database':
        return get_config_db(value)
    return value

def get_config_db(dsn):
    """
    Returns a web.py database configuration dictionary.
    Parses a DSN of the format dbn://user:password/dbname
    @TODO: Support multiple DBs as described in http://webpy.org/cookbook/multidbs
    """
    regexp = '(?P<dbn>[a-z]+)://((?P<user>[^:]+):(?P<pw>[^/]+))?/(?P<db>.+)'
    result = re.match(regexp, dsn)
    if result == None:
        raise Exception, "Invalid databse connection string: " + dsn
    retval = {}
    for key, value in result.groupdict().iteritems():
        if value != None:
            retval[key] = value
    return retval
