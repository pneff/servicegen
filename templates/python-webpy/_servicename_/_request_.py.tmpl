<%
from tools.Service import DumpTree
import re
# Get requests by path
my_requests = {}
for request in requests:
    method = request['method']
    path = request['path']
    
    # Normalize path to a regexp
    path = re.sub('{[^}]+}', '[^/]+', path)
    my_requests.setdefault(path, []).append((method, request))
    
    # Calculate index of the current request `req' inside the
    # my_requests array for the appropriate path. If another
    # request has the same path and comes before this request,
    # this file doesn't have to be created.
    if request == req and len(my_requests[path]) > 1:
        return

req_path = re.sub('{[^}]+}', '[^/]+', req['path'])
my_requests = my_requests[req_path]
methods = [request for request in my_requests]

def getStmValue(stm):
    value = ''
    for i in range(stm.getChildCount()):
        value += stm.getChild(i).getText()
    return getValue({
        'value': value,
        'type': stm.getText()})

def path_params(req):
    # Only get path params
    req_path_params = filter(
        lambda param: param.startswith('{') and param.endswith('}'),
        re.split('({[^}]+})', req['path']))
    return ", ".join(map(lambda param: param[1:-1], req_path_params))

def function_params(statement):
    params = [getStmValue(statement.getChild(i))
              for i in range(1, statement.getChildCount())]
    return ', '.join(params)

def cache_duration_in_secs(stm):
    type = stm.getChild(0).getText()
    value = int(stm.getChild(0).getChild(0).getText())
    if type == 'DURATION_MINUTES':
        return value * 60
    elif type == 'DURATION_HOURS':
        return value * 60 * 60
    elif type == 'DURATION_DAYS':
        return value * 60 * 60 * 24
    elif type == 'DURATION_MONTHS':
        return value * 60 * 60 * 24 * 30 # approc
    elif type == 'DURATION_YEARS':
        return value * 60 * 60 * 24 * 365
    else:
        return value

def function_name(func):
    function = func.getChild(0).getChild(0).getText()
    if func.getChild(0).getText() == 'FUNCTION_NAME_BUILTIN':
        function = 'servicegen.function.' + function
    return function

def value_type(stm, req):
    if stm.getText() != 'VARREF':
        return stm.getText()
    name = stm.getChild(0).getText()
    if name in req['vars']:
        return req['vars'][name]['type']
    if name in config:
        return config[name]['type']
    return 'string'

%># CAREFUL:
# This code was generated by the `servicegen' framework.
# Do not edit this file directly.

import re
import servicegen.function, servicegen.output, servicegen.input
% if service['externals'].has_key('webpy'):
% for imp in service['externals']['webpy']:
import ${imp.replace('.py', '')}
% endfor
% endif

class ${req['name']}:
  % for method in methods:
    <% method_name, method_req = method %>
    def ${method_name}(self, ${path_params(method_req)}):
        try:
          %for var in method_req['postparams']:
            ${var} = servicegen.input.get('${var}')
          %endfor
          
          %for stm in method_req['statements']:
          %if stm.getText() == 'FUNCTION_CALL':
            ${function_name(stm)}(${function_params(stm)})

          %elif stm.getText() == 'VARIABLE':
            <%
            identifier, value, cacheDuration, cacheKey, cacheKeyVars = ('', '', 0, '', [])
            for i in range(stm.getChildCount()):
                child = stm.getChild(i)
                if child.getText() == 'VARTYPE':
                    # ignore
                    cacheKey += '_' + child.getChild(0).getText()
                    pass
                elif child.getText() == 'CACHE':
                    # caching
                    cacheDuration = cache_duration_in_secs(child)
                    cacheKey += '_' + str(cacheDuration)
                elif child.getText()[0:8] == 'LITERAL_':
                    value = getStmValue(child)
                    cacheKey += '_' + value
                elif child.getText() == 'FUNCTION_CALL':
                    value = function_name(child) + '(' + function_params(child) + ')'
                    for param in [child.getChild(i) for i in range(1, child.getChildCount())]:
                        if param.getText() == 'VARREF':
                            cacheKeyVars.append(param.getChild(0).getText())
                    cacheKey += '_' + value
                else:
                    identifier = child.getText()
                    cacheKey += '_' + identifier
            cacheKey = "'" + re.sub('[^a-zA-Z_]', '', cacheKey).replace('__', '_')[1:] + "'"
            if len(cacheKeyVars) > 0:
                cacheKey += ' + ' + ' + '.join(cacheKeyVars)
            %>
            %if cacheDuration > 0:
            ${identifier} = servicegen.function.get_cache(${cacheKey})
            if ${identifier} == None:
                ${identifier} = ${value}
                servicegen.function.set_cache(${cacheKey}, ${identifier})
            %else:
            ${identifier} = ${value}
            %endif
          %endif
          %endfor
          
          %if len(method_req['output']) > 0:
            __output_type = servicegen.output.best_of(${method_req['output'].keys()})
            __outputter = servicegen.output.get_outputter(__output_type)
            __outputter.header()
          %for out_type, out in method_req['output'].iteritems():
            if __output_type == '${out_type}':
              %for out_statement in out['statements']:
              %if value_type(out_statement, method_req) == 'array':
                __outputter.write_array(${getStmValue(out_statement)}, '${out_statement.getChild(0).getText()}')
              %elif value_type(out_statement, method_req) == 'records':
                __outputter.write_records(${getStmValue(out_statement)}, '${out_statement.getChild(0).getText()}')
              %elif value_type(out_statement, method_req) == 'hash':
                __outputter.write_hash(${getStmValue(out_statement)}, '${out_statement.getChild(0).getText()}')
              %else:
                __outputter.write('${value_type(out_statement, method_req)}', ${getStmValue(out_statement)})
              %endif
              %endfor
            
          %endfor
          %endif
        
        except servicegen.function.TerminateRequest:
            # Ignore this exception
            return
  % endfor
