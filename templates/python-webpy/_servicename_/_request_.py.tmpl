<%
import re
# Get requests by path
my_requests = {}
for request in requests:
    method = request['method']
    path = request['path']
    
    # Normalize path to a regexp
    path = re.sub('{[^}]+}', '[^/]+', path)
    my_requests.setdefault(path, []).append((method, request))

req_path = re.sub('{[^}]+}', '[^/]+', req['path'])
# Only get path params
req_path_params = filter(
    lambda param: param.startswith('{') and param.endswith('}'),
    re.split('({[^}]+})', req['path']))
req_path_params = ", ".join(map(lambda param: param[1:-1], req_path_params))

my_requests = my_requests[req_path]
methods = [request for request in my_requests]


%>class ${req['name']}:
  % for method in methods:
    <% method_name, method_req = method %>
    def ${method_name}(${req_path_params}):
      % for varname, var in method_req['vars'].iteritems():
        # ${var['type']}
        ${var['name']} = ${getValue(var['value'])}
      % endfor
    
  % endfor